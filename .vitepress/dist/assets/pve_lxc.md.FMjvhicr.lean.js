import{_ as i,c as a,a2 as e,o as t}from"./chunks/framework.eme8ZeBJ.js";const c=JSON.parse('{"title":"使用 LXC 容器安装 qBittorrent","description":"","frontmatter":{},"headers":[],"relativePath":"pve/lxc.md","filePath":"pve/lxc.md","lastUpdated":1742136241000}'),n={name:"pve/lxc.md"};function l(p,s,h,d,k,o){return t(),a("div",null,s[0]||(s[0]=[e(`<h1 id="使用-lxc-容器安装-qbittorrent" tabindex="-1">使用 LXC 容器安装 qBittorrent <a class="header-anchor" href="#使用-lxc-容器安装-qbittorrent" aria-label="Permalink to &quot;使用 LXC 容器安装 qBittorrent&quot;">​</a></h1><div class="info custom-block"><p class="custom-block-title">什么是 LXC？</p><p>LXC（Linux Containers）是一种 Linux 端操作系统级的虚拟化技术，可以实现轻量级容器，每个容器看起来像一个独立的操作系统，它们共享同一台物理服务器，但是互相隔离。LXC 容器比传统虚拟机更加轻便、高效，且启动速度快。LXC 中创建的为非特权容器，相较于特权容器，其有更高的安全性，更小的攻击面，同时便于管理和升级。</p></div><p>本篇教程虽然步骤较多，但是没什么坑，原理也简单。</p><p>首先介绍我的环境：</p><ul><li>fnOS：192.168.2.2，共享目录：downloads</li><li>LXC：192.168.2.4，挂载目录：/mnt/downloads</li></ul><p>需要将 fnOS 的 NFS 共享 <code>downloads</code> 目录挂载到 LXC 中的 <code>/mnt/downloads</code> 下面，然后在 1Panel 中通过 docker compose 安装 qBittorrent。</p><h2 id="为什么要使用-lxc" tabindex="-1">为什么要使用 LXC？ <a class="header-anchor" href="#为什么要使用-lxc" aria-label="Permalink to &quot;为什么要使用 LXC？&quot;">​</a></h2><p>经常使用 qBittorrent 的朋友都知道，如果 qBittorrent 安装在 NAS 中，而 NAS 又通过具有代理功能的主路由上网，很容易导致 qBittorrent 的流量走代理，不仅可能会把代理的流量跑光，而且可能会被 PT 站识别为盒子，严重的还会违反网站规则被封号。</p><p>常见的办法是通过 macvlan 给 qBittorrent 设置一个独立的 IP，这样就可以在主路由中通过 IP 来设置规则，避免 qBittorrent 流量走代理。但 macvlan 的网络结构还是略显复杂，误操作容易导致 NAS 系统出问题。而且在 fnOS 中，需要开启 OVS（虚拟交换机）才能创建 macvlan，<strong>目前开启 OVS 可能在重启后会导致 fnOS 系统失联</strong>。</p><p>所以如果有 PVE 这个环境，完全可以利用 PVE 的 LXC 来安装 qBittorrent，这样 qBittorrent 也能得到一个单独的 IP，方便在主路由的代理中设置规则，达到和 macvlan 类似的效果。</p><h2 id="创建-lxc" tabindex="-1">创建 LXC <a class="header-anchor" href="#创建-lxc" aria-label="Permalink to &quot;创建 LXC&quot;">​</a></h2><p>在 PVE 的 <code>CT 模板</code> 中下载 <code>debian-12</code> 模板：</p><p><img src="https://img.slarker.me/wiki/Snipaste_2025-03-16_20-50-43.webp" alt=""></p><p>在 PVE 的右上角点击 <code>创建 CT</code> 创建 LXC 容器，设置主机名和密码，取消勾选 <code>无特权的容器</code>：</p><p><img src="https://img.slarker.me/wiki/Snipaste_2025-03-16_20-52-13.webp" alt=""></p><p>磁盘保持默认，CPU 可以选择 <code>2</code> 核，内存（MB）和 Swap 设置为 <code>1024</code>，接下来设置网络，这里给 LXC 设置一个 <code>静态 IP</code>（192.168.2.4），DNS 保持默认：</p><p><img src="https://img.slarker.me/wiki/Snipaste_2025-03-16_20-53-53.webp" alt=""></p><p>在创建好的 LXC 容器的 <code>选项</code> 中，打开 LXC 功能，勾选 <code>NFS</code> 和 <code>嵌套</code>：</p><p><img src="https://img.slarker.me/wiki/Snipaste_2025-03-16_20-54-43.webp" alt=""></p><p>之后 <code>启动</code> LXC。</p><h2 id="更换-linux-源" tabindex="-1">更换 Linux 源 <a class="header-anchor" href="#更换-linux-源" aria-label="Permalink to &quot;更换 Linux 源&quot;">​</a></h2><p>首先进入 LXC 的控制台，输入用户名（默认为 <code>root</code>），密码登录。</p><p>更新系统，安装 <code>curl</code>：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">apt</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> update</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">apt</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> curl</span></span></code></pre></div><p>执行换源脚本：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bash</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">curl</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -sSL</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://linuxmirrors.cn/main.sh)</span></span></code></pre></div><p>遇到选项提示，推荐使用下面的设置：</p><ul><li>软件源选择：<code>中国科学技术大学</code></li><li>软件源是否使用 HTTP 协议：<code>否</code></li><li>是否跳过更新软件包：<code>否</code></li><li>是否自动清理下载缓存：<code>是</code></li></ul><h2 id="安装-docker" tabindex="-1">安装 Docker <a class="header-anchor" href="#安装-docker" aria-label="Permalink to &quot;安装 Docker&quot;">​</a></h2><p>一键安装 docker 引擎：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bash</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">curl</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -sSL</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://linuxmirrors.cn/docker.sh)</span></span></code></pre></div><p>遇到选项提示，推荐使用下面的设置：</p><ul><li><code>Docker CE</code> 源选择：<code>中国科学技术大学</code></li><li><code>Docker Registry</code> 源选择：<code>Docker Proxy（推荐）</code></li><li>软件源是否使用 HTTP 协议：<code>否</code></li><li>是否安装最新版本的 <code>Docker Engine</code>：<code>是</code></li></ul><h2 id="安装-1panel-面板" tabindex="-1">安装 1Panel 面板 <a class="header-anchor" href="#安装-1panel-面板" aria-label="Permalink to &quot;安装 1Panel 面板&quot;">​</a></h2><p>为了更方便的管理 LXC，你可以安装 <a href="https://1panel.cn/" target="_blank" rel="noreferrer">1Panel</a>，这是一款开源的服务器管理面板，非常易用，可以通过网页操作管理服务器。</p><p>适用于 <code>Debian</code> 系统的一键安装命令如下：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">curl</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -sSL</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://resource.fit2cloud.com/1panel/package/quick_start.sh</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -o</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> quick_start.sh</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &amp;&amp; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bash</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> quick_start.sh</span></span></code></pre></div><p>安装完成之后，你可以看到一个管理地址以及默认生成的用户名和密码。你可以通过 1Panel 来安装管理 docker 应用。</p><p><img src="https://img.slarker.me/wiki/Snipaste_2025-03-16_21-11-00.webp" alt=""></p><h2 id="挂载-nfs" tabindex="-1">挂载 NFS <a class="header-anchor" href="#挂载-nfs" aria-label="Permalink to &quot;挂载 NFS&quot;">​</a></h2><p>这一步将 fnOS 的 NFS 共享目录（downloads）挂载到 LXC 中，便于 docker 应用直接访问。在飞牛中开启 NFS 服务之后，可以看到 nfs 的访问路径如下：</p><p><img src="https://img.slarker.me/wiki/20250316211724422.webp" alt=""></p><p>在 LXC 中安装 NFS 客户端：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">apt</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nfs-common</span></span></code></pre></div><p>创建挂载点：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mkdir</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /mnt/downloads</span></span></code></pre></div><p>先临时挂载测试是否 OK：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mount</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -t</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nfs4</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 192.168.2.2:/fs/1000/nfs/downloads</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /mnt/downloads</span></span></code></pre></div><p>如果挂载成功，在 1Panel 的文件管理中可以看到 <code>/mnt/downloads</code> 路径下面有 fnOS 的文件。</p><p><img src="https://img.slarker.me/wiki/20250316212319383.webp" alt=""></p><h2 id="设置开机自动挂载" tabindex="-1">设置开机自动挂载 <a class="header-anchor" href="#设置开机自动挂载" aria-label="Permalink to &quot;设置开机自动挂载&quot;">​</a></h2><p>如果上面的临时挂载测试没问题，使用 <code>1Panel</code> 的文件管理器打开 <code>/etc/fstab</code> 文件，加入下面这行：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">192.168.2.2:/fs/1000/nfs/downloads</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /mnt/downloads</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nfs</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> defaults</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span></code></pre></div><p>之后点击 <code>确认</code>，可以重启 LXC 确认自动挂载是否生效。</p><h2 id="使用-1panel-通过-compose-安装-qbittorrent" tabindex="-1">使用 1Panel 通过 compose 安装 qBittorrent <a class="header-anchor" href="#使用-1panel-通过-compose-安装-qbittorrent" aria-label="Permalink to &quot;使用 1Panel 通过 compose 安装 qBittorrent&quot;">​</a></h2><p>在 1Panel 的 <code>容器</code> -&gt; <code>编排</code> -&gt; <code>创建编排</code> 中，填写文件夹名称 <code>qbittorrent</code>，compose 使用下面的配置：</p><div class="language-yml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">qbittorrent</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">services</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  qbittorrent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    image</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">linuxserver/qbittorrent:4.6.7</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    container_name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">qbittorrent</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    environment</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">PUID=1000</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">PGID=1000</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">TZ=Asia/Shanghai</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">WEBUI_PORT=8080</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">TORRENTING_PORT=50000</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    volumes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">./config:/config</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/mnt/downloads:/downloads</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> #optional</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    ports</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">8080:8080</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">50000:50000</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">50000:50000/udp</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    restart</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">always</span></span></code></pre></div><p>之后点击 <code>确认</code>，就会自动安装 qBittorrent。安装完成之后，qBittorrent 的默认用户名为 <code>admin</code>，默认密码在容器日志中可以看到。</p><h2 id="设置访问控制规则" tabindex="-1">设置访问控制规则 <a class="header-anchor" href="#设置访问控制规则" aria-label="Permalink to &quot;设置访问控制规则&quot;">​</a></h2><p>以 SSRP 为例，可以在 <code>访问控制</code> 中，将 LXC 的 IP：<code>192.168.2.4</code> 添加到 <code>不走代理的局域网 LAN IP</code> 中：</p><p><img src="https://img.slarker.me/wiki/20250316224034674.webp" alt=""></p><p>之后 <code>保存并应用</code>，这样就不用担心 BT/PT 流量走代理或者被识别为盒子了。</p>`,62)]))}const g=i(n,[["render",l]]);export{c as __pageData,g as default};
