import{_ as s,c as a,a2 as t,o as l}from"./chunks/framework.eme8ZeBJ.js";const c=JSON.parse('{"title":"使用脚本给 BT、PT 资源打标签（转载）","description":"","frontmatter":{},"headers":[],"relativePath":"basic/bt_script.md","filePath":"basic/bt_script.md","lastUpdated":1729927887000}'),e={name:"basic/bt_script.md"};function p(n,i,h,r,o,k){return l(),a("div",null,i[0]||(i[0]=[t(`<h1 id="使用脚本给-bt、pt-资源打标签-转载" tabindex="-1">使用脚本给 BT、PT 资源打标签（转载） <a class="header-anchor" href="#使用脚本给-bt、pt-资源打标签-转载" aria-label="Permalink to &quot;使用脚本给 BT、PT 资源打标签（转载）&quot;">​</a></h1><blockquote><ul><li>这是群友 @牛马打工人 根据自己的实际需求编写的脚本，来快速给 qb，tr 下载工具里的资源打标签，方便后续对资源进行整理。</li><li>这里仅作转载，感谢群友的热心分享！</li></ul></blockquote><p>分享一个标记打印 nas 垃圾劣质资源的 python 脚本，通过给 qb、tr 打标签的方式以及日志打印的方式使用。纯本地运行，只会给qb、tr增加标签或者打印日志，不会自动删种或删文件，需要你参考打完的标签和打印日志手动检查后再自己删，这样更稳妥。能实现诸如以下功能：</p><ul><li>标记在 qb、tr 做种但是没有入 emby 库的资源，此类资源应当被删除（mp 整理资源即使失败也会添加已整理标签，不能作为入库依据）。</li><li>标记辅种数小于 x 的种子，x=1 就是单站辅种性价比低，磁盘紧张时应该优先清理。</li><li>标记 ISO、TS 格式的资源，垃圾资源优先清理。</li><li>标记 tracker 异常的种子，且会标明是否有其他辅种存在，让你决定删除时是否要删除源文件。（tr 不需要，tr 自带的异常 tracker 归类就够用）</li><li>标记源文件已经删除的种子。</li><li>标记需要长期保种的种子，按照保存路径中包含固定字符圈选。</li><li>对某站点下的所有种子逐个上传限速，把带宽留给喜欢的大站。</li><li>打印在下载根文件夹下，但是没有做种的文件。</li><li>打印在媒体根文件夹下，但是没有做种的文件。可能是早期迅雷下载的资源，可能是 qb 种子被站点删掉你也删了做种的资源。</li><li>打印在媒体根文件夹下，重复版本的视频文件，比如 西游记.mkv、西游记.mp4、西游记1080p.mp4、西游记 2160p.mp4 都会算作重复打印出来。清理哪个你自己决定啦。</li><li>打印辅种数高于 x 的种子名称，你可以把辅种多的资源名字分享给我，事半功倍的把ptpp数据搞好。</li><li>标记是否标记源文件同时在 qb\\tr 做种的种子,会添加标签 F-辅种tr \\ F-辅种qb</li></ul><h2 id="使用步骤" tabindex="-1">使用步骤 <a class="header-anchor" href="#使用步骤" aria-label="Permalink to &quot;使用步骤&quot;">​</a></h2><h3 id="站点标签依赖" tabindex="-1">站点标签依赖 <a class="header-anchor" href="#站点标签依赖" aria-label="Permalink to &quot;站点标签依赖&quot;">​</a></h3><p>脚本依赖标签中有站点名称,需要先执行一遍 mp插件&lt;下载任务分类与标签&gt;(勾选 自动站点标签 补全下载历史的标签与分类(一次性任务))，让每个种子都添加上站点中文名标签。</p><h3 id="下载脚本" tabindex="-1">下载脚本 <a class="header-anchor" href="#下载脚本" aria-label="Permalink to &quot;下载脚本&quot;">​</a></h3><ul><li>方式一：打开 <a href="https://github.com/zyt0339/pt_clear_v1" target="_blank" rel="noreferrer">https://github.com/zyt0339/pt_clear_v1</a>，下载-下载ZIP，然后解压出pt_clear_v1.py。</li><li>方式二：打开 <a href="https://github.com/zyt0339/pt_clear_v1/blob/main/pt_clear_v1.py" target="_blank" rel="noreferrer">https://github.com/zyt0339/pt_clear_v1/blob/main/pt_clear_v1.py</a> 复制全部脚本文字，在电脑新建 <code>pt_clear_v1.txt</code> 将前面文字粘贴进去，关闭保存，后缀名改为 <code>.py</code>。</li></ul><div class="warning custom-block"><p class="custom-block-title">注意</p><p>这脚本在 nas 执行能使用全部能力，在电脑运行不能进行文件路径分析这些能力（没法用路径判断文件状态）</p></div><h3 id="安装脚本依赖的-qb、tr-库" tabindex="-1">安装脚本依赖的 qb、tr 库 <a class="header-anchor" href="#安装脚本依赖的-qb、tr-库" aria-label="Permalink to &quot;安装脚本依赖的 qb、tr 库&quot;">​</a></h3><p><strong>在哪运行就在哪安装</strong>，都是 github 开源的 qb、tr python 依赖库，体积很小，无安全风险。</p><p>如果电脑运行就打开电脑命令行，或者 nas 运行就 ssh 连接到 nas。<code>ssh 连接到 nas</code> 是一个基础技能好多脚本都要用到，这里不展开讲了，分别运行以下两行指令，不报红字错误就是成功了。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pip</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> qbittorrent-api</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pip</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> transmission-rpc</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -U</span></span></code></pre></div><h3 id="修改配置字段" tabindex="-1">修改配置字段 <a class="header-anchor" href="#修改配置字段" aria-label="Permalink to &quot;修改配置字段&quot;">​</a></h3><p>以 <code>txt</code> 格式打开 <code>pt_clear_v1.py</code> 文件，修改保存。（开关在脚本中也有详细的注释介绍）</p><ul><li>配置 qb、tr 链接信息，内外网、ip 域名都支持。如果只使用 qb 可以只配置一个，另一个让他自然登录失败。</li></ul><div class="language-py vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">py</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">SERVER_HOST</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;192.168.1.100&quot;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">QB_CONN_INFO</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> dict</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">	    host</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">SERVER_HOST</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">	    port</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8085</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">	    username</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;xxx&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">	    password</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;xxx&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">TR_CONN_INFO</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> dict</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">	    protocol</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;http&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">	    host</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">SERVER_HOST</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">	    port</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">9091</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">	    username</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;xxx&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">	    password</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;xxx&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><ul><li><p><code>SWITCH_REAL_INVOKE = True</code> 是否只是模拟打印,不真正给 qb、tr 添加标签等</p></li><li><p><code>SWITCH_EMBY = True</code> 是否增加 F-已入库\\F-未入库标签\\F-长期, 只有在 nas 上执行才能生效,因为本质是判断硬链接个数</p></li><li><p><code>SWITCH_TORRENT_COUNT = True</code> 辅种个数标记开关,打开后辅种个数小于<code>LIMIT_TO_DELETE_THRESHOLD</code> 的种子会添加(F-辅种3)这种标签 <code>LIMIT_TO_DELETE_THRESHOLD = 5</code>&lt;= x 的才会标记 (&lt;=1 就是单站辅种)</p></li><li><p><code>PRINT_COPY_COUNT = 20</code> 只会打印输出辅种数高于此值的种, &gt;= 1000时不再打印</p></li><li><p><code>SWITCH_FILE_SUFFIX = True</code> 是否增加 <code>F-ISO</code>\`F-TS<code>\\</code>F-m2TS\` 文件类型标记</p></li><li><p><code>SWITCH_TRACKER = True</code> 是否增加 tracker 异常状态标记,无辅种的可以连源文件一起删除</p></li><li><p><code>SWITCH_LIMIT = True</code> 是否对某站种子上传限速,设置到种子粒度 <code>UOLOAD_LIMIT_SITE = {&#39;麒麟&#39;: _100K, &#39;青蛙&#39;: _100K, &#39;朱雀&#39;: _100K, &#39;CARPT&#39;: _100K}</code> 限速站点及速度</p></li><li><p><code>SWITCH_PRINT_NOT_UPLOAD_FILE = True</code> 是否打印没有做种的文件列表，只有download_parent_dirs配置了才会有效；<code>download_parent_dirs = {&quot;/volume2/video/Downloads/qBittorrent&quot;,&quot;/volume4/video4/Downloads/qBittorrent&quot;}</code> 下载根目录,多个盘写多个</p></li><li><p><code>SWITCH_PRING_NOT_TORRENT = True</code> 是否打印 emby 等媒体库下没做种的视频文件 <code>SWITCH_PRING_MULTY_VIDEO_FILE = True</code> 是否打印媒体库下重复的不同清晰度视频文件 <code>media_parent_dirs = {&quot;/volume2/video/link&quot;,&quot;/volume4/video4/link&quot;}</code> 媒体根目录,多个盘写多个</p></li><li><p><code>SWITCH_MARK_IN_TR_OR_QB = True</code> 是否标记源文件同时在qb\\tr做种的种子,会添加标签 F-辅种tr\\F-辅种qb</p></li></ul><h3 id="执行" tabindex="-1">执行 <a class="header-anchor" href="#执行" aria-label="Permalink to &quot;执行&quot;">​</a></h3><ul><li>在电脑执行，前面提到了在电脑运行不能进行文件路径分析这些能力。配置完后直接 <code>python3 pt_clear_v1.py</code> 就可以啦，qb 5000 种大概要运行 1 分钟。</li><li>在群晖定时任务，也是配置 <code>python3 /volume3/develop/pt_clear_v1.py</code> 就行啦，要写全路径。周期你自己决定吧，可以要一次也可以一周来 2 次。</li><li>在 mp 命令执行器中，有个插件就叫命令执行器。也是配置 <code>python3 /volume3/develop/pt_clear_v1.py</code> 全路径，周期自己决定，好处是执行完能给手机发通知（前提你得搭建了通知），但有个需要额外注意的，代码里路径判断都是基于绝对路径的，如果 docker 映射换了假路径得自己做好路径转换，我没转，我脑容量小转不过来。</li></ul><h2 id="效果展示" tabindex="-1">效果展示 <a class="header-anchor" href="#效果展示" aria-label="Permalink to &quot;效果展示&quot;">​</a></h2><p><img src="https://picture.agsvpt.com/i/2024/10/24/67192f0be54ad.png" alt=""><img src="https://picture.agsvpt.com/i/2024/10/24/6719302f424d3.png" alt=""></p><h2 id="其他" tabindex="-1">其他 <a class="header-anchor" href="#其他" aria-label="Permalink to &quot;其他&quot;">​</a></h2><p>欢迎好心人将这个脚本弄成 mp 插件，能帮助到别人是我滴荣幸。</p>`,25)]))}const F=s(e,[["render",p]]);export{c as __pageData,F as default};
